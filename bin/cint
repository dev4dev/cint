#!/usr/bin/env ruby
# encoding: UTF-8

ROOT = File.expand_path(File.dirname(__FILE__) + '/../')
$:.unshift(ROOT)

require 'xcodeproj'
require 'colored'
require 'commander/import'
require 'lib/xcodeproj'
require 'lib/cint'

program :name, 'Carthage Integrator'
program :version, Cint::VERSION
program :description, 'Integrates Carthage Frameworks'
program :help, 'Author', 'Alex Antonyuk <alex@antonyuk.me>'

default_command :install

def error(message)
  puts "\nError: #{message}".red
  exit
end

def warning(message)
  puts "\nWarning: #{message}".yellow
  exit
end

def info(message)
  puts message.green
end

BUILD_PHASE_NAME = 'Carthage'.freeze

SDK_TO_PLATFORM = {
  'iphoneos' => 'iOS',
  'macosx' => 'Mac',
  'appletvos' => 'tvOS',
  'watchos' => 'watchOS'
}.freeze

PLATFORMS = %w(iOS Mac watchOS tvOS).freeze

def prepare_inputs(frameworks)
  frameworks.map do |f|
    "$(SRCROOT)#{f[1..-1]}"
  end
end

def prepare_outputs(frameworks)
  frameworks.map do |f|
    name = f.split("/").last
    "$(BUILT_PRODUCTS_DIR)/$(FRAMEWORKS_FOLDER_PATH)/#{name}"
  end
end

def print_report(target, all, integrated)
  all.map! { |f| File.basename(f) }
  integrated.map! { |f| File.basename(f) }
  
  puts "Target ".green + target.name.yellow
  puts
  
  old = all - integrated
  unless old.empty?
    info 'Existed:'
    puts old.join("\n").yellow
  end
  puts
  info 'Integrated:'
  if integrated.empty?
    puts 'None'.yellow
  else
    puts integrated.join("\n").yellow
  end
end

def find_project
  pattern = Dir.pwd + '/*.xcodeproj'
  Dir.glob(pattern)
end

def get_project_name(args)
  if args.count == 0
    projects = find_project
    error 'There are more than one project in the directory, pass project\'s name explicitly' if projects.count > 1
    error 'There are no projects in the directory, pass project\'s name explicitly' if projects.count == 0
    project_name = projects.first
  else
    project_name = args[0]
  end
  project_name = "#{project_name}.xcodeproj" unless project_name.end_with? '.xcodeproj'
  project_name
end

def intergate_frameworks(target, project, use_platform)
  platform = use_platform ? SDK_TO_PLATFORM[target.sdk] : ''
  frameworks = Cint::CarthageFiles.frameworks(platform)

  if frameworks.empty?
    warning 'No frameworks found'
    return
  end

  # Add Framework Files
  added_frameworks = project.add_missing_frameworks_to_target(target, frameworks)

  # Add Frameworks Search Path (FRAMEWORK_SEARCH_PATHS)
  fw_search_path = "$(PROJECT_DIR)/Carthage/Build" + (platform.empty? ? '' : "/#{platform}")
  project.add_path(fw_search_path)

  # Integrate Shell Script
  if target.sdk != 'macosx'
    phase = target.carthage_build_phase
    prepared_inputs = prepare_inputs(frameworks)
    prepared_outputs = prepare_outputs(frameworks)
    phase.setup_with_frameworks(prepared_inputs, prepared_outputs)
  end
  
  # footer
  say "\n"
  print_report(target, frameworks, added_frameworks)
  say "\n"
end

# Commands
command :install do |c|
  c.syntax = 'cint install <project_name>'
  c.description = 'Adds frameworks built by Carthage into a project'
  c.option '--no-platform', 'Do not search in platform sub-directory'
  c.action do |args, options|
    use_platform = options.no_platform == nil
    error 'Carthage build folder does not exists' unless Cint::CarthageFiles.exists

    # Choose Project
    project_name = get_project_name(args)
    info "Working with #{File.basename(project_name)}\n"

    project = Cint::Project.new(project_name)

    # choose target
    choice = choose("Choose target:\n", *project.targets.map(&:name))
    target = project.target_by_name(choice)
    
    # integrate
    intergate_frameworks(target, project, use_platform)
    
    # Save Project
    project.save

    info 'Done. Re-open Project'
  end
end

def cleanup_orphaned_symbols(frameworks)
  used_symbols = frameworks.flat_map do |framework|
    Cint::Cleanup.bcsymbolmap(framework)
  end
  all = Cint::Cleanup.all_bcsymbolmap
  orphans = all - used_symbols
  
  warning "There are no orphan symbols" if orphans.empty?
  orphans.each_with_index do |symb, index|
    puts "(#{index + 1}/#{orphans.count}) Removing #{symb}...".red
    File.delete(symb)
  end
end

def cleanup_symbols(frameworks, args)
  if args.empty?
    filtered_frameworks = frameworks
  else
    filtered_frameworks = frameworks.select do |framework|
      name = File.basename(framework)
      args.include?(name)
    end
  end
  warning "Nothing to precess" if filtered_frameworks.empty?
  
  progress(filtered_frameworks) do |framework|
    puts "Processing #{framework}...".green
    Cint::Cleanup.bcsymbolmap(framework).each do |bcs|
      if File.exists?(bcs)
        print "\tRemoving #{bcs}".red
        File.delete(bcs)
      end
      $stdout.flush
    end
  end
end

command :ocleanup do |c|
  c.syntax = 'cint ocleanup'
  c.description = 'Remove orphaned bcsymbolmap files'
  c.action do |args, options|
    frameworks = Cint::Cleanup.frameworks
    error "There are not a single framework found. Check directory, it should be ran in Build/* directory." if frameworks.empty?
    
    cleanup_orphaned_symbols(frameworks)
  end
end

command :cleanup do |c|
  c.syntax = 'cint cleanup framework...'
  c.description = 'Remove bcsymbolmap files for frameworks. If no parameters passed it will perform cleanup for every found framework.'
  c.action do |args, options|
    frameworks = Cint::Cleanup.frameworks
    error "There are not a single framework found. Check directory, it should be ran in Build/* directory." if frameworks.empty?
    
    cleanup_symbols(frameworks, args)
  end
end
